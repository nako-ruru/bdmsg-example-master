// Copyright 2016 someonegg. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package golog implements a multilayer & leveled & structured logging API.
//
// A structured log contains a set of fields, a field is a key-value pair.
// The keys's type is string, the value's type is arbitrary. There are two
// special rules for value.
//   If the type is "error", use v.Error()
//   If the type is "fmt.Stringer", use v.String()
// All logs have three special fields: "level", "time", "message".
//
// Log generated by Logger. A logger has three properties: "level", "handler", "predefs".
//   The "level" controls whether a log will be passed to the handler, the rule is
//     "log.level >= logger.level".
//   The "handler" will process logs, outputting them.
//   The "predefs" is set of fields, all logs generated by this logger will include them.
// You can create sub-loggers from an existing logger, the topmost logger is
// RootLogger.
//
// Sub-logger will dynamically & recursively inherit properties from its parent logger.
//  It can set its own "level", "handler". When not setted, use the inherited value.
//  It can modify (add del) its own "predefs". When log, use (inherited + its own) "predefs".
//
// The simplest way to use golog is:
//   package main
//   import (
//     "github.com/someonegg/golog"
//   )
//   var log = golog.SubLoggerWithFields(golog.RootLogger, "module", "main")
//   func main() {
//       golog.RootLogger.SetHandler(xxx)
//       ...
//       log.Info("App start", "pid", pid)
//       ...
//   }
package golog
